name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Dependencies - Eigen3, gmp, boost, bliss
      run: sudo apt install  gcovr libeigen3-dev uuid-dev libboost-system1.71-dev libboost-program-options1.71-dev libboost-test1.71-dev libboost-timer1.71-dev libboost-chrono1.71-dev libboost-serialization1.71-dev libbliss-dev

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v3
      with:
          path: ${{runner.workspace}}/dependencies
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-


    - if: ${{ steps.cache-dependencies.outputs.cache-hit != 'true' }}
      name: Create Dependencies Environment
      shell: bash
      working-directory: ${{runner.workspace}}
      run: cmake -E make_directory ${{runner.workspace}}/dependencies

    - if: ${{ steps.cache-dependencies.outputs.cache-hit != 'true' }}
      name: Download dependencies
      working-directory: ${{runner.workspace}}/dependencies
      run: git clone https://github.com/ths-rwth/carl && git clone https://github.com/hypro/hypro

    - if: ${{ steps.cache-dependencies.outputs.cache-hit != 'true' }}
      name: Set branches for dependencies
      working-directory: ${{runner.workspace}}/dependencies
      run: cd carl && git checkout 3b0c79a68a && cd ../hypro && git checkout alpha

    - name: Dependencies - CArL
      working-directory: ${{runner.workspace}}/dependencies/carl
      run: mkdir -p build && cd build && cmake .. && make carl -j $(nproc)

    - name: Dependencies - HyPro
      working-directory: ${{runner.workspace}}/dependencies/hypro
      run: mkdir -p build && cd build && cmake .. && make hypro -j $(nproc)

    - name: Configure cmake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCOVERAGE=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target all

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Produce coverage reports
      working-directory: ${{github.workspace}}/build
      run: make linearization_coverage

    - name: Upload coverage
      working-directory: ${{github.workspace}}/build
      run: curl -Os https://uploader.codecov.io/latest/linux/codecov && chmod +x codecov && ./codecov
      
